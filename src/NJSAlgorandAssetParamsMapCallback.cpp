// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mapcallback.djinni

#include "NJSAlgorandAssetParamsMapCallback.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSAlgorandAssetParamsMapCallback::onCallback(const std::experimental::optional<std::unordered_map<std::string, ::ledger::core::api::AlgorandAssetParams>> & result, const std::experimental::optional<::ledger::core::api::Error> & error)
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        Local<Map> arg_0_tmp = Map::New((Nan::GetCurrentContext())->GetIsolate());
        for(auto const& arg_0_tmp_elem : arg_0_optional)
        {
            auto arg_0_tmp_first = Nan::New<String>(arg_0_tmp_elem.first).ToLocalChecked();
            auto arg_0_tmp_second = Nan::New<Object>();
            Local<Value> arg_0_tmp_second_1;
            if(arg_0_tmp_elem.second.assetId)
            {
                auto arg_0_tmp_second_1_optional = (arg_0_tmp_elem.second.assetId).value();
                auto arg_0_tmp_second_1_tmp = Nan::New<String>(arg_0_tmp_second_1_optional).ToLocalChecked();
                arg_0_tmp_second_1 = arg_0_tmp_second_1_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("assetId").ToLocalChecked(), arg_0_tmp_second_1);
            Local<Value> arg_0_tmp_second_2;
            if(arg_0_tmp_elem.second.assetName)
            {
                auto arg_0_tmp_second_2_optional = (arg_0_tmp_elem.second.assetName).value();
                auto arg_0_tmp_second_2_tmp = Nan::New<String>(arg_0_tmp_second_2_optional).ToLocalChecked();
                arg_0_tmp_second_2 = arg_0_tmp_second_2_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("assetName").ToLocalChecked(), arg_0_tmp_second_2);
            Local<Value> arg_0_tmp_second_3;
            if(arg_0_tmp_elem.second.unitName)
            {
                auto arg_0_tmp_second_3_optional = (arg_0_tmp_elem.second.unitName).value();
                auto arg_0_tmp_second_3_tmp = Nan::New<String>(arg_0_tmp_second_3_optional).ToLocalChecked();
                arg_0_tmp_second_3 = arg_0_tmp_second_3_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("unitName").ToLocalChecked(), arg_0_tmp_second_3);
            Local<Value> arg_0_tmp_second_4;
            if(arg_0_tmp_elem.second.url)
            {
                auto arg_0_tmp_second_4_optional = (arg_0_tmp_elem.second.url).value();
                auto arg_0_tmp_second_4_tmp = Nan::New<String>(arg_0_tmp_second_4_optional).ToLocalChecked();
                arg_0_tmp_second_4 = arg_0_tmp_second_4_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("url").ToLocalChecked(), arg_0_tmp_second_4);
            Local<Value> arg_0_tmp_second_5;
            if(arg_0_tmp_elem.second.defaultFrozen)
            {
                auto arg_0_tmp_second_5_optional = (arg_0_tmp_elem.second.defaultFrozen).value();
                auto arg_0_tmp_second_5_tmp = Nan::New<Boolean>(arg_0_tmp_second_5_optional);
                arg_0_tmp_second_5 = arg_0_tmp_second_5_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("defaultFrozen").ToLocalChecked(), arg_0_tmp_second_5);
            Local<Value> arg_0_tmp_second_6;
            if(arg_0_tmp_elem.second.total)
            {
                auto arg_0_tmp_second_6_optional = (arg_0_tmp_elem.second.total).value();
                auto arg_0_tmp_second_6_tmp = Nan::New<String>(arg_0_tmp_second_6_optional).ToLocalChecked();
                arg_0_tmp_second_6 = arg_0_tmp_second_6_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("total").ToLocalChecked(), arg_0_tmp_second_6);
            Local<Value> arg_0_tmp_second_7;
            if(arg_0_tmp_elem.second.decimals)
            {
                auto arg_0_tmp_second_7_optional = (arg_0_tmp_elem.second.decimals).value();
                auto arg_0_tmp_second_7_tmp = Nan::New<Int32>(arg_0_tmp_second_7_optional);
                arg_0_tmp_second_7 = arg_0_tmp_second_7_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("decimals").ToLocalChecked(), arg_0_tmp_second_7);
            Local<Value> arg_0_tmp_second_8;
            if(arg_0_tmp_elem.second.creatorAddress)
            {
                auto arg_0_tmp_second_8_optional = (arg_0_tmp_elem.second.creatorAddress).value();
                auto arg_0_tmp_second_8_tmp = Nan::New<String>(arg_0_tmp_second_8_optional).ToLocalChecked();
                arg_0_tmp_second_8 = arg_0_tmp_second_8_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("creatorAddress").ToLocalChecked(), arg_0_tmp_second_8);
            Local<Value> arg_0_tmp_second_9;
            if(arg_0_tmp_elem.second.managerAddress)
            {
                auto arg_0_tmp_second_9_optional = (arg_0_tmp_elem.second.managerAddress).value();
                auto arg_0_tmp_second_9_tmp = Nan::New<String>(arg_0_tmp_second_9_optional).ToLocalChecked();
                arg_0_tmp_second_9 = arg_0_tmp_second_9_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("managerAddress").ToLocalChecked(), arg_0_tmp_second_9);
            Local<Value> arg_0_tmp_second_10;
            if(arg_0_tmp_elem.second.freezeAddress)
            {
                auto arg_0_tmp_second_10_optional = (arg_0_tmp_elem.second.freezeAddress).value();
                auto arg_0_tmp_second_10_tmp = Nan::New<String>(arg_0_tmp_second_10_optional).ToLocalChecked();
                arg_0_tmp_second_10 = arg_0_tmp_second_10_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("freezeAddress").ToLocalChecked(), arg_0_tmp_second_10);
            Local<Value> arg_0_tmp_second_11;
            if(arg_0_tmp_elem.second.clawbackAddress)
            {
                auto arg_0_tmp_second_11_optional = (arg_0_tmp_elem.second.clawbackAddress).value();
                auto arg_0_tmp_second_11_tmp = Nan::New<String>(arg_0_tmp_second_11_optional).ToLocalChecked();
                arg_0_tmp_second_11 = arg_0_tmp_second_11_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("clawbackAddress").ToLocalChecked(), arg_0_tmp_second_11);
            Local<Value> arg_0_tmp_second_12;
            if(arg_0_tmp_elem.second.reserveAddress)
            {
                auto arg_0_tmp_second_12_optional = (arg_0_tmp_elem.second.reserveAddress).value();
                auto arg_0_tmp_second_12_tmp = Nan::New<String>(arg_0_tmp_second_12_optional).ToLocalChecked();
                arg_0_tmp_second_12 = arg_0_tmp_second_12_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("reserveAddress").ToLocalChecked(), arg_0_tmp_second_12);
            Local<Value> arg_0_tmp_second_13;
            if(arg_0_tmp_elem.second.metadataHash)
            {
                auto arg_0_tmp_second_13_optional = (arg_0_tmp_elem.second.metadataHash).value();
                auto arg_0_tmp_second_13_tmp = Nan::New<String>(arg_0_tmp_second_13_optional).ToLocalChecked();
                arg_0_tmp_second_13 = arg_0_tmp_second_13_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_second, Nan::New<String>("metadataHash").ToLocalChecked(), arg_0_tmp_second_13);

            arg_0_tmp->Set(Nan::GetCurrentContext(), arg_0_tmp_first, arg_0_tmp_second);
        }

        arg_0 = arg_0_tmp;
    }

    Local<Value> arg_1;
    if(error)
    {
        auto arg_1_optional = (error).value();
        auto arg_1_tmp = Nan::New<Object>();
        auto arg_1_tmp_1 = Nan::New<Integer>((int)arg_1_optional.code);
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("code").ToLocalChecked(), arg_1_tmp_1);
        auto arg_1_tmp_2 = Nan::New<String>(arg_1_optional.message).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("message").ToLocalChecked(), arg_1_tmp_2);

        arg_1 = arg_1_tmp;
    }

    auto local_resolver = Nan::New<Promise::Resolver>(pers_resolver);
    if(error)
    {
        auto rejected = local_resolver->Reject(Nan::GetCurrentContext(), arg_1);
        rejected.FromJust();
    }
    else
    {
        auto resolve = local_resolver->Resolve(Nan::GetCurrentContext(), arg_0);
        resolve.FromJust();
    }
}

NAN_METHOD(NJSAlgorandAssetParamsMapCallback::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAlgorandAssetParamsMapCallback function can only be called as constructor (use New)");
    }

    auto resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    auto node_instance = std::make_shared<NJSAlgorandAssetParamsMapCallback>(resolver);
    djinni::js::ObjectWrapper<NJSAlgorandAssetParamsMapCallback>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSAlgorandAssetParamsMapCallback::AlgorandAssetParamsMapCallback_prototype;

Local<Object> NJSAlgorandAssetParamsMapCallback::wrap(const std::shared_ptr<ledger::core::api::AlgorandAssetParamsMapCallback> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(AlgorandAssetParamsMapCallback_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::AlgorandAssetParamsMapCallback>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSAlgorandAssetParamsMapCallback::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSAlgorandAssetParamsMapCallback::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAlgorandAssetParamsMapCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAlgorandAssetParamsMapCallback").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    AlgorandAssetParamsMapCallback_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSAlgorandAssetParamsMapCallback").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
