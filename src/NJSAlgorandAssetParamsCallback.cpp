// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from callback.djinni

#include "NJSAlgorandAssetParamsCallback.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSAlgorandAssetParamsCallback::onCallback(const std::experimental::optional<::ledger::core::api::AlgorandAssetParams> & result, const std::experimental::optional<::ledger::core::api::Error> & error)
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        auto arg_0_tmp = Nan::New<Object>();
        Local<Value> arg_0_tmp_1;
        if(arg_0_optional.assetId)
        {
            auto arg_0_tmp_1_optional = (arg_0_optional.assetId).value();
            auto arg_0_tmp_1_tmp = Nan::New<String>(arg_0_tmp_1_optional).ToLocalChecked();
            arg_0_tmp_1 = arg_0_tmp_1_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("assetId").ToLocalChecked(), arg_0_tmp_1);
        Local<Value> arg_0_tmp_2;
        if(arg_0_optional.assetName)
        {
            auto arg_0_tmp_2_optional = (arg_0_optional.assetName).value();
            auto arg_0_tmp_2_tmp = Nan::New<String>(arg_0_tmp_2_optional).ToLocalChecked();
            arg_0_tmp_2 = arg_0_tmp_2_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("assetName").ToLocalChecked(), arg_0_tmp_2);
        Local<Value> arg_0_tmp_3;
        if(arg_0_optional.unitName)
        {
            auto arg_0_tmp_3_optional = (arg_0_optional.unitName).value();
            auto arg_0_tmp_3_tmp = Nan::New<String>(arg_0_tmp_3_optional).ToLocalChecked();
            arg_0_tmp_3 = arg_0_tmp_3_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("unitName").ToLocalChecked(), arg_0_tmp_3);
        Local<Value> arg_0_tmp_4;
        if(arg_0_optional.url)
        {
            auto arg_0_tmp_4_optional = (arg_0_optional.url).value();
            auto arg_0_tmp_4_tmp = Nan::New<String>(arg_0_tmp_4_optional).ToLocalChecked();
            arg_0_tmp_4 = arg_0_tmp_4_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("url").ToLocalChecked(), arg_0_tmp_4);
        Local<Value> arg_0_tmp_5;
        if(arg_0_optional.defaultFrozen)
        {
            auto arg_0_tmp_5_optional = (arg_0_optional.defaultFrozen).value();
            auto arg_0_tmp_5_tmp = Nan::New<Boolean>(arg_0_tmp_5_optional);
            arg_0_tmp_5 = arg_0_tmp_5_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("defaultFrozen").ToLocalChecked(), arg_0_tmp_5);
        Local<Value> arg_0_tmp_6;
        if(arg_0_optional.total)
        {
            auto arg_0_tmp_6_optional = (arg_0_optional.total).value();
            auto arg_0_tmp_6_tmp = Nan::New<String>(arg_0_tmp_6_optional).ToLocalChecked();
            arg_0_tmp_6 = arg_0_tmp_6_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("total").ToLocalChecked(), arg_0_tmp_6);
        Local<Value> arg_0_tmp_7;
        if(arg_0_optional.decimals)
        {
            auto arg_0_tmp_7_optional = (arg_0_optional.decimals).value();
            auto arg_0_tmp_7_tmp = Nan::New<Int32>(arg_0_tmp_7_optional);
            arg_0_tmp_7 = arg_0_tmp_7_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("decimals").ToLocalChecked(), arg_0_tmp_7);
        Local<Value> arg_0_tmp_8;
        if(arg_0_optional.creatorAddress)
        {
            auto arg_0_tmp_8_optional = (arg_0_optional.creatorAddress).value();
            auto arg_0_tmp_8_tmp = Nan::New<String>(arg_0_tmp_8_optional).ToLocalChecked();
            arg_0_tmp_8 = arg_0_tmp_8_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("creatorAddress").ToLocalChecked(), arg_0_tmp_8);
        Local<Value> arg_0_tmp_9;
        if(arg_0_optional.managerAddress)
        {
            auto arg_0_tmp_9_optional = (arg_0_optional.managerAddress).value();
            auto arg_0_tmp_9_tmp = Nan::New<String>(arg_0_tmp_9_optional).ToLocalChecked();
            arg_0_tmp_9 = arg_0_tmp_9_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("managerAddress").ToLocalChecked(), arg_0_tmp_9);
        Local<Value> arg_0_tmp_10;
        if(arg_0_optional.freezeAddress)
        {
            auto arg_0_tmp_10_optional = (arg_0_optional.freezeAddress).value();
            auto arg_0_tmp_10_tmp = Nan::New<String>(arg_0_tmp_10_optional).ToLocalChecked();
            arg_0_tmp_10 = arg_0_tmp_10_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("freezeAddress").ToLocalChecked(), arg_0_tmp_10);
        Local<Value> arg_0_tmp_11;
        if(arg_0_optional.clawbackAddress)
        {
            auto arg_0_tmp_11_optional = (arg_0_optional.clawbackAddress).value();
            auto arg_0_tmp_11_tmp = Nan::New<String>(arg_0_tmp_11_optional).ToLocalChecked();
            arg_0_tmp_11 = arg_0_tmp_11_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("clawbackAddress").ToLocalChecked(), arg_0_tmp_11);
        Local<Value> arg_0_tmp_12;
        if(arg_0_optional.reserveAddress)
        {
            auto arg_0_tmp_12_optional = (arg_0_optional.reserveAddress).value();
            auto arg_0_tmp_12_tmp = Nan::New<String>(arg_0_tmp_12_optional).ToLocalChecked();
            arg_0_tmp_12 = arg_0_tmp_12_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("reserveAddress").ToLocalChecked(), arg_0_tmp_12);
        Local<Value> arg_0_tmp_13;
        if(arg_0_optional.metadataHash)
        {
            auto arg_0_tmp_13_optional = (arg_0_optional.metadataHash).value();
            auto arg_0_tmp_13_tmp = Nan::New<String>(arg_0_tmp_13_optional).ToLocalChecked();
            arg_0_tmp_13 = arg_0_tmp_13_tmp;
        }

        Nan::DefineOwnProperty(arg_0_tmp, Nan::New<String>("metadataHash").ToLocalChecked(), arg_0_tmp_13);

        arg_0 = arg_0_tmp;
    }

    Local<Value> arg_1;
    if(error)
    {
        auto arg_1_optional = (error).value();
        auto arg_1_tmp = Nan::New<Object>();
        auto arg_1_tmp_1 = Nan::New<Integer>((int)arg_1_optional.code);
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("code").ToLocalChecked(), arg_1_tmp_1);
        auto arg_1_tmp_2 = Nan::New<String>(arg_1_optional.message).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("message").ToLocalChecked(), arg_1_tmp_2);

        arg_1 = arg_1_tmp;
    }

    auto local_resolver = Nan::New<Promise::Resolver>(pers_resolver);
    if(error)
    {
        auto rejected = local_resolver->Reject(Nan::GetCurrentContext(), arg_1);
        rejected.FromJust();
    }
    else
    {
        auto resolve = local_resolver->Resolve(Nan::GetCurrentContext(), arg_0);
        resolve.FromJust();
    }
}

NAN_METHOD(NJSAlgorandAssetParamsCallback::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAlgorandAssetParamsCallback function can only be called as constructor (use New)");
    }

    auto resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    auto node_instance = std::make_shared<NJSAlgorandAssetParamsCallback>(resolver);
    djinni::js::ObjectWrapper<NJSAlgorandAssetParamsCallback>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSAlgorandAssetParamsCallback::AlgorandAssetParamsCallback_prototype;

Local<Object> NJSAlgorandAssetParamsCallback::wrap(const std::shared_ptr<ledger::core::api::AlgorandAssetParamsCallback> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(AlgorandAssetParamsCallback_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::AlgorandAssetParamsCallback>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSAlgorandAssetParamsCallback::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSAlgorandAssetParamsCallback::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAlgorandAssetParamsCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAlgorandAssetParamsCallback").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    AlgorandAssetParamsCallback_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSAlgorandAssetParamsCallback").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
