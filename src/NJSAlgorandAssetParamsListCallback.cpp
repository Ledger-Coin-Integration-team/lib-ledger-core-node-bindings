// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from callback.djinni

#include "NJSAlgorandAssetParamsListCallback.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSAlgorandAssetParamsListCallback::onCallback(const std::experimental::optional<std::vector<::ledger::core::api::AlgorandAssetParams>> & result, const std::experimental::optional<::ledger::core::api::Error> & error)
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> arg_0;
    if(result)
    {
        auto arg_0_optional = (result).value();
        Local<Array> arg_0_tmp = Nan::New<Array>();
        for(size_t arg_0_tmp_id = 0; arg_0_tmp_id < arg_0_optional.size(); arg_0_tmp_id++)
        {
            auto arg_0_tmp_elem = Nan::New<Object>();
            Local<Value> arg_0_tmp_elem_1;
            if(arg_0_optional[arg_0_tmp_id].assetId)
            {
                auto arg_0_tmp_elem_1_optional = (arg_0_optional[arg_0_tmp_id].assetId).value();
                auto arg_0_tmp_elem_1_tmp = Nan::New<String>(arg_0_tmp_elem_1_optional).ToLocalChecked();
                arg_0_tmp_elem_1 = arg_0_tmp_elem_1_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("assetId").ToLocalChecked(), arg_0_tmp_elem_1);
            Local<Value> arg_0_tmp_elem_2;
            if(arg_0_optional[arg_0_tmp_id].assetName)
            {
                auto arg_0_tmp_elem_2_optional = (arg_0_optional[arg_0_tmp_id].assetName).value();
                auto arg_0_tmp_elem_2_tmp = Nan::New<String>(arg_0_tmp_elem_2_optional).ToLocalChecked();
                arg_0_tmp_elem_2 = arg_0_tmp_elem_2_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("assetName").ToLocalChecked(), arg_0_tmp_elem_2);
            Local<Value> arg_0_tmp_elem_3;
            if(arg_0_optional[arg_0_tmp_id].unitName)
            {
                auto arg_0_tmp_elem_3_optional = (arg_0_optional[arg_0_tmp_id].unitName).value();
                auto arg_0_tmp_elem_3_tmp = Nan::New<String>(arg_0_tmp_elem_3_optional).ToLocalChecked();
                arg_0_tmp_elem_3 = arg_0_tmp_elem_3_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("unitName").ToLocalChecked(), arg_0_tmp_elem_3);
            Local<Value> arg_0_tmp_elem_4;
            if(arg_0_optional[arg_0_tmp_id].url)
            {
                auto arg_0_tmp_elem_4_optional = (arg_0_optional[arg_0_tmp_id].url).value();
                auto arg_0_tmp_elem_4_tmp = Nan::New<String>(arg_0_tmp_elem_4_optional).ToLocalChecked();
                arg_0_tmp_elem_4 = arg_0_tmp_elem_4_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("url").ToLocalChecked(), arg_0_tmp_elem_4);
            Local<Value> arg_0_tmp_elem_5;
            if(arg_0_optional[arg_0_tmp_id].defaultFrozen)
            {
                auto arg_0_tmp_elem_5_optional = (arg_0_optional[arg_0_tmp_id].defaultFrozen).value();
                auto arg_0_tmp_elem_5_tmp = Nan::New<Boolean>(arg_0_tmp_elem_5_optional);
                arg_0_tmp_elem_5 = arg_0_tmp_elem_5_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("defaultFrozen").ToLocalChecked(), arg_0_tmp_elem_5);
            Local<Value> arg_0_tmp_elem_6;
            if(arg_0_optional[arg_0_tmp_id].total)
            {
                auto arg_0_tmp_elem_6_optional = (arg_0_optional[arg_0_tmp_id].total).value();
                auto arg_0_tmp_elem_6_tmp = Nan::New<String>(arg_0_tmp_elem_6_optional).ToLocalChecked();
                arg_0_tmp_elem_6 = arg_0_tmp_elem_6_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("total").ToLocalChecked(), arg_0_tmp_elem_6);
            Local<Value> arg_0_tmp_elem_7;
            if(arg_0_optional[arg_0_tmp_id].decimals)
            {
                auto arg_0_tmp_elem_7_optional = (arg_0_optional[arg_0_tmp_id].decimals).value();
                auto arg_0_tmp_elem_7_tmp = Nan::New<Int32>(arg_0_tmp_elem_7_optional);
                arg_0_tmp_elem_7 = arg_0_tmp_elem_7_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("decimals").ToLocalChecked(), arg_0_tmp_elem_7);
            Local<Value> arg_0_tmp_elem_8;
            if(arg_0_optional[arg_0_tmp_id].creatorAddress)
            {
                auto arg_0_tmp_elem_8_optional = (arg_0_optional[arg_0_tmp_id].creatorAddress).value();
                auto arg_0_tmp_elem_8_tmp = Nan::New<String>(arg_0_tmp_elem_8_optional).ToLocalChecked();
                arg_0_tmp_elem_8 = arg_0_tmp_elem_8_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("creatorAddress").ToLocalChecked(), arg_0_tmp_elem_8);
            Local<Value> arg_0_tmp_elem_9;
            if(arg_0_optional[arg_0_tmp_id].managerAddress)
            {
                auto arg_0_tmp_elem_9_optional = (arg_0_optional[arg_0_tmp_id].managerAddress).value();
                auto arg_0_tmp_elem_9_tmp = Nan::New<String>(arg_0_tmp_elem_9_optional).ToLocalChecked();
                arg_0_tmp_elem_9 = arg_0_tmp_elem_9_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("managerAddress").ToLocalChecked(), arg_0_tmp_elem_9);
            Local<Value> arg_0_tmp_elem_10;
            if(arg_0_optional[arg_0_tmp_id].freezeAddress)
            {
                auto arg_0_tmp_elem_10_optional = (arg_0_optional[arg_0_tmp_id].freezeAddress).value();
                auto arg_0_tmp_elem_10_tmp = Nan::New<String>(arg_0_tmp_elem_10_optional).ToLocalChecked();
                arg_0_tmp_elem_10 = arg_0_tmp_elem_10_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("freezeAddress").ToLocalChecked(), arg_0_tmp_elem_10);
            Local<Value> arg_0_tmp_elem_11;
            if(arg_0_optional[arg_0_tmp_id].clawbackAddress)
            {
                auto arg_0_tmp_elem_11_optional = (arg_0_optional[arg_0_tmp_id].clawbackAddress).value();
                auto arg_0_tmp_elem_11_tmp = Nan::New<String>(arg_0_tmp_elem_11_optional).ToLocalChecked();
                arg_0_tmp_elem_11 = arg_0_tmp_elem_11_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("clawbackAddress").ToLocalChecked(), arg_0_tmp_elem_11);
            Local<Value> arg_0_tmp_elem_12;
            if(arg_0_optional[arg_0_tmp_id].reserveAddress)
            {
                auto arg_0_tmp_elem_12_optional = (arg_0_optional[arg_0_tmp_id].reserveAddress).value();
                auto arg_0_tmp_elem_12_tmp = Nan::New<String>(arg_0_tmp_elem_12_optional).ToLocalChecked();
                arg_0_tmp_elem_12 = arg_0_tmp_elem_12_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("reserveAddress").ToLocalChecked(), arg_0_tmp_elem_12);
            Local<Value> arg_0_tmp_elem_13;
            if(arg_0_optional[arg_0_tmp_id].metadataHash)
            {
                auto arg_0_tmp_elem_13_optional = (arg_0_optional[arg_0_tmp_id].metadataHash).value();
                auto arg_0_tmp_elem_13_tmp = Nan::New<String>(arg_0_tmp_elem_13_optional).ToLocalChecked();
                arg_0_tmp_elem_13 = arg_0_tmp_elem_13_tmp;
            }

            Nan::DefineOwnProperty(arg_0_tmp_elem, Nan::New<String>("metadataHash").ToLocalChecked(), arg_0_tmp_elem_13);

            Nan::Set(arg_0_tmp, (int)arg_0_tmp_id,arg_0_tmp_elem);
        }

        arg_0 = arg_0_tmp;
    }

    Local<Value> arg_1;
    if(error)
    {
        auto arg_1_optional = (error).value();
        auto arg_1_tmp = Nan::New<Object>();
        auto arg_1_tmp_1 = Nan::New<Integer>((int)arg_1_optional.code);
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("code").ToLocalChecked(), arg_1_tmp_1);
        auto arg_1_tmp_2 = Nan::New<String>(arg_1_optional.message).ToLocalChecked();
        Nan::DefineOwnProperty(arg_1_tmp, Nan::New<String>("message").ToLocalChecked(), arg_1_tmp_2);

        arg_1 = arg_1_tmp;
    }

    auto local_resolver = Nan::New<Promise::Resolver>(pers_resolver);
    if(error)
    {
        auto rejected = local_resolver->Reject(Nan::GetCurrentContext(), arg_1);
        rejected.FromJust();
    }
    else
    {
        auto resolve = local_resolver->Resolve(Nan::GetCurrentContext(), arg_0);
        resolve.FromJust();
    }
}

NAN_METHOD(NJSAlgorandAssetParamsListCallback::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSAlgorandAssetParamsListCallback function can only be called as constructor (use New)");
    }

    auto resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    auto node_instance = std::make_shared<NJSAlgorandAssetParamsListCallback>(resolver);
    djinni::js::ObjectWrapper<NJSAlgorandAssetParamsListCallback>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSAlgorandAssetParamsListCallback::AlgorandAssetParamsListCallback_prototype;

Local<Object> NJSAlgorandAssetParamsListCallback::wrap(const std::shared_ptr<ledger::core::api::AlgorandAssetParamsListCallback> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(AlgorandAssetParamsListCallback_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::AlgorandAssetParamsListCallback>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSAlgorandAssetParamsListCallback::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSAlgorandAssetParamsListCallback::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSAlgorandAssetParamsListCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSAlgorandAssetParamsListCallback").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    AlgorandAssetParamsListCallback_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSAlgorandAssetParamsListCallback").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
